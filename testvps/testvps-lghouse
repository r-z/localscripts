#!/usr/bin/env bash

# TODO: read URLs from https://looking.house/points.php (parse directly)
# - test if proper url
# - skip lines starting with #
# - multiple filters

MYVERSION=0.1
MYNAME=`basename $0`
DEFAULT_OUTFILE="$0-`date '+%Y-%m-%d_%H_%M_%S'`.log"

BASE_URL="http://r2dev.ro/scripts" # use this if no config file found
CONFFILE_URL="$BASE_URL/looking-house-servers.conf"

CURL_CONNECT_TIMEOUT=10
# curl max. time on a dl, not used
CURL_MAX_TIME=120 # 2 min

#CONFFILE=points.txt

printhelp() {
#    [ $DBG ] && 
    echo "DBG: $DBG"
    echo "
VPS Speed Tester v$MYVERSION
usage: $0 -c|-i configfile [-o outputfile ]

options:
    -c|-i <configfile>	read server list from <configfile>
    -m <string>		only test servers matching 'string' (case insensitive)
    -l <location>	only test servers in <location> (case insensitive) [*]
    -u <url>		read conf file from URL
    -o [outputfile]	print results to outputfile (default: $DEFAULT_OUTFILE) [*]

    -4			test using IPv4
    -6			test using IPv6

    -s <speed>		only test servers with speed <speed> or higher (in Mbit/s) [**]
    -q <speed>		only test servers with speed <speed> (in Mbit/s) [**]
    -p			do not test, only print matching servers

    -r <string>		list providers matching <string> ; use \"*\" (with quotes) to list all (does not filter by size yet)

    -g|-b		use 1GB files
    -f|-y		force (assume 'yes' on all queries)
    -t <timeout>	set curl connect timeout

    -d			debug output

    [*]		= not working properly yet, using $DEFAULT_OUTFILE
    [**]	= not working properly, server count is wrong

config file line format: <Description> | <URL>
lines starting with # are ignored (comments)

can use with:
    curl -sL $BASE_URL/testvps | bash
or
    wget -qO- $BASE_URL/testvps | bash
or with parameters:
    curl -sL $BASE_URL/testvps | bash -s -- [options]
"
}

basename() {
  local name="${1##*/}"
  echo "${name%$2}"
}

# catch_abort (stolen from yabs)
# Purpose: catch CTRL+C signals in order to exit the script cleanly and remove temp files.
function abort() {
#	echo -e "\n*** Aborting. Cleaning up files...\n"
	echo -e "\n*** Aborting."
	rm -f "$TMPFILE" "$TMP_CONFFILE"
#	unset LC_ALL
	exit 1
}

# trap CTRL+C signals to exit script cleanly
trap abort INT



while getopts ":c:m:o:q:s:gb46pr:fyt:hd" opt
do
# $OPTARG is predefined (can't change name) and is the argument passed to option $opt
#    echo "testing: ${opt}"
    case "${opt}" in
	c|i) CONFFILE=$OPTARG ;;
	m) MATCHING=$OPTARG ;;
	l) LOCATION=$OPTARG ;;
#	z) echo "You selected option z: $OPTARG"; exit 2 ;;
#	o) SAVE_OUTPUT=1; [ "${OPTARG::1}" != "-" ] && OUTFILE=${OPTARG};  ;;
# getopts doesn't support optional arguments :(
	u)
	    if [[ $OPTARG != */* ]]; then
		echo "$OPTARG doesn't look like an URL, trying $BASE_URL/$OPTARG"
		CONFFILE_URL="$BASE_URL/$OPTARG"
	    else
		CONFFILE_URL=$OPTARG
	    fi
	;;
	o) SAVE_OUTPUT=1 ;;
	q) SPEED_FIXED=$OPTARG ;;
	s) SPEED_MIN=$OPTARG ;;
# try to use GB file instead of 100M
	g|b) USE_GB=1; CURL_MAX_TIME=600 ;;
	4) PROTO="-4" ;;
	6) PROTO="-6" ;;
	p) PRINT_ONLY=1 ;;
	r) ACTION="list_providers"; MATCH_PROVIDERS=$OPTARG ;;
	f|y) FORCE=1 ;;
	t) CURL_CONNECT_TIMEOUT=$OPTARG ;;
	h) printhelp; exit 0 ;;
	d) DBG=1 ;;
	\?) echo "invalid option: $OPTARG"; printhelp; exit 1  ;;
    esac
done

#DBG=1
#curl -sL r2dev.ro/scripts/testvps | bash -s -- -m netherland

if ! [ -r "$CONFFILE" ]; then
    [ -z "$CONFFILE" ] && echo -n "Config file not specified!" || echo -n "configfile '$CONFFILE' does not exist or is unreadable!"
    [ -z "$FORCE" ] && { read -p " Read config from URL: $CONFFILE_URL? [Y/n] "; } || REPLY=Y
    [ "${REPLY^^}" = "N" ] && abort

    echo "reading servers from url: $CONFFILE_URL"
    TMP_CONFFILE=`mktemp -t $MYNAME-config.XXXXXX`
    CONFFILE="$TMP_CONFFILE"
    curl -o "$CONFFILE" -sL "$CONFFILE_URL"
fi

[ "$ACTION" = "list_providers" ] && {
    echo "Listing providers matching '$MATCH_PROVIDERS':"
# could be better/more efficient...
    PROVIDERS=`grep http $CONFFILE | grep -v ^# | awk -F"|" '{print $2}' | sort | uniq | grep -i -E "$MATCH_PROVIDERS"`
    TOTAL_PROVIDERS=`echo "$PROVIDERS" | wc -l`
    [ -z "$PROVIDERS" ] && { echo "No providers matching '$MATCH_PROVIDERS'."; exit 1; }

    echo "$PROVIDERS"
    echo ""
    echo "Total: $TOTAL_PROVIDERS providers matching '$MATCH_PROVIDERS'"
    exit 0
}

[ -n "$MATCHING" ] && echo "Filtering servers matching '$MATCHING'"

# TODO: filter by speed
# possible speeds (Mbit/s): 10 15 25 30 50 80 100 200 250 500 1000 2000 5000 10000


# count total number of servers to test
if [ -n "$MATCHING" ]; then
    TOTAL_SERVERS=`grep -v \^\# $CONFFILE | grep "|" | grep -i -c "$MATCHING"`
elif [ -n "$SPEED_FIXED" ]; then
    TOTAL_SERVERS=`grep -v \^\# $CONFFILE | grep "|" | grep -i -c "$SPEED_FIXED Mbit/s"`
else
    TOTAL_SERVERS=`grep -v \^\# $CONFFILE | grep -c "|"`
fi

[ "$TOTAL_SERVERS" = "0" ] && abort

if [ "$TOTAL_SERVERS" -gt "50" ] && [ -z "$FORCE" ] && [ -z "$PRINT_ONLY" ] ; then
    read -p "Warning: Do you really wish to test $TOTAL_SERVERS servers? This could take a long time! [y/N]: "
    [ "${REPLY^^}" != "Y" ] && abort
fi

[ "$USE_GB" == "1" ] && echo "Using 1Gb files; this may take a long time!"
[ -n "$PROTO" ] && {
    case "$PROTO" in
	-4) echo "Using IPv4 (forced)" ;;
	-6) echo "Using IPv6 (forced)" ;;
    esac
}

start_time=$SECONDS

TMPFILE=`mktemp -t $MYNAME.XXXXXX`

if [ -n "$MATCHING" ] && [ -z "$OUTFILE" ] ; then
    [ -n "$USE_GB" ] && { FILE_SIZE=1000; } || { FILE_SIZE=100; }
    OUTFILE="$MYNAME-`uname -n`-$MATCHING-$FILE_SIZE-`date '+%Y-%m-%d_%H_%M_%S'`.log"
else
    OUTFILE="${OUTFILE:-$DEFAULT_OUTFILE}"
fi

SUMMARY=""

CURRENT_SERVER=0

while IFS= read -r l; do

#    [ $DBG ] && echo "MATCHING: $MATCHING"
    # skip line if not matching
    [ -n "$MATCHING" ] && {
	if [ -z "`echo "$l" | grep -i "$MATCHING"`" ]; then continue; fi
    }
    [ -n "$SPEED_FIXED" ] && {
	if [ -z "`echo "$l" | grep -i "$SPEED_FIXED Mbit/s"`" ]; then continue; fi
    }

    IFS="|" read -r -a a <<< "$l"
    read -r IPv4 IPv6 <<< "${a[0]}"

    PROVIDER=${a[1]%% }; PROVIDER=${PROVIDER## }
    IFS=";" read -r LOCATION DC <<< "${a[2]}"
    DC=${DC/Data center: /}; DC=${DC%% }; DC=${DC## }

    IFS="," read -r COUNTRY CITY ADDR <<< "${LOCATION}"
    COUNTRY=${COUNTRY%% }; COUNTRY=${COUNTRY## }
    CITY=${CITY%% }; CITY=${CITY## }
    ADDR=${ADDR%% }; ADDR=${ADDR## }

    URL=${a[3]%% }; URL=${URL## }
    URL_FILE=${URL##*/}
#    GB_URL=${URL/100\.mb/1000\.mb}
    [ -n "$USE_GB" ] && URL=${URL/100\.mb/1000\.mb}

    re='(https?|ftp)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'
    if ! [[ $URL =~ $re ]]; then
	echo "Warning: not a valid URL: $URL; skipping!"
	continue
    fi

    PORTSPEED=${a[4]%% }; PORTSPEED=${PORTSPEED## }
    read -r SPEED JUNK <<< "${PORTSPEED}"

# ***
    [[ "$SPEED" -lt "$SPEED_MIN" ]] && { echo "Speed below $SPEED_MIN"; continue; }

#    echo -n "IPv4: $IPv4"
#    [ -n "$IPv6" ] && echo -n "; IPv6: $IPv6"
#    echo -n "; PROVIDER: $PROVIDER; URL=$URL; PORTSPEED=$PORTSPEED; COUNTRY=$COUNTRY; CITY=$CITY"
#    [ -n "$ADDR" ] && echo -n " (ADDR: $ADDR)" || echo -n ""
#    echo "; DC=$DC"
#    echo "URL_FILE: $URL_FILE; GB_URL=$GB_URL"
    #echo "full loc: ${a[2]}"

    let "CURRENT_SERVER=CURRENT_SERVER+1"
    echo -n "[$(date '+%H:%M:%S')] "
    printf "[%s/%s] %s (%s) %s\n" $CURRENT_SERVER $TOTAL_SERVERS "$PROVIDER: $CITY, $COUNTRY" "$URL" "$PORTSPEED"

    # skip if PRINT_ONLY flag is set
    [ -n "$PRINT_ONLY" ] && continue

    curl $PROTO --connect-timeout $CURL_CONNECT_TIMEOUT --max-time $CURL_MAX_TIME -k -o /dev/null $URL 2> >(tee -a $TMPFILE >&2)
    speed=`tail -1 $TMPFILE | awk '{ print $(NF-5) }'`
    SUMMARY="$SUMMARY"`printf "%-39s: %7s | %12s %s\n" "$PROVIDER: $CITY, $COUNTRY" "$speed" "$PORTSPEED" "$URL"`"\n"

done < $CONFFILE

rm -f "$TMPFILE" "$TMP_CONFFILE"
#[ -f "$TMP_CONFFILE" ] && rm -f "$TMP_CONFFILE"

[ -n "$SUMMARY" ] && {
    echo -e "\nSummary:"
    echo "--------------------------------------------------------------------------------"
# https://stackoverflow.com/questions/55926142/how-to-use-a-unix-sort-command-to-sort-by-human-readable-numeric-file-size-in-a
    OUTPUT=`echo -e "$SUMMARY" | sed 's/[0-9][mgt]/\U&/g' | sort -r -t ":" -k3h | tac`
    echo "$OUTPUT"
    [ "$OUTFILE" ] && {
	echo "--------------------------------------------------------------------------------"
	echo "Output written to: $OUTFILE"
	echo "$OUTPUT" > $OUTFILE
    }
}

elapsed=$(( SECONDS - start_time ))
eval "echo Elapsed time: $(date -ud "@$elapsed" +'$((%s/3600/24)) days %H hr %M min %S sec')"

echo "Done."
